<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSM on MinsterBlog</title>
    <link>https://minster77.github.io/categories/ssm/</link>
    <description>Recent content in SSM on MinsterBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Oct 2021 16:22:25 +0800</lastBuildDate><atom:link href="https://minster77.github.io/categories/ssm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC（二）</title>
      <link>https://minster77.github.io/p/springmvc%E4%BA%8C/</link>
      <pubDate>Wed, 06 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/springmvc%E4%BA%8C/</guid>
      <description>Spring MVC（二） HttpMessageConverter HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文
HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity
  @RequestBody
@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值
@RequestMapping(&amp;#34;/testRequestBody&amp;#34;) public String testRequestBody(@RequestBody String requestBody){ System.out.println(&amp;#34;requestBody:&amp;#34;+requestBody); return &amp;#34;success&amp;#34;; } index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;TestRequestBody&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form th:action=&amp;#34;@{/testRequestEntity}&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; username:&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;userName&amp;#34;&amp;gt; password:&amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 输出结果：requestBody:userName=111&amp;amp;password=111
  RequestEntity
RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息
@RequestMapping(&amp;#34;/testRequestEntity&amp;#34;) public String testRequestEntity(RequestEntity&amp;lt;String&amp;gt; requestEntity){ System.out.println(&amp;#34;requestHeader:&amp;#34;+requestEntity.getHeaders()); System.out.println(&amp;#34;requestBody:&amp;#34;+requestEntity.getBody()); return &amp;#34;success&amp;#34;; } 会在控制台返回一个报文的报头与报体
  @ResponseBody
@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器
@RequestMapping(&amp;#34;/testResponseBody&amp;#34;) @ResponseBody public String testResponseBody(){ return &amp;#34;Test ResponseBody&amp;#34;; }   @RestController</description>
    </item>
    
    <item>
      <title>SpringMVC（一）</title>
      <link>https://minster77.github.io/p/springmvc%E4%B8%80/</link>
      <pubDate>Tue, 05 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/springmvc%E4%B8%80/</guid>
      <description>Spring MVC（一） Spring MVC概括   什么是MVC
  MVC 是模型(Model)、视图(View)、控制器(Controller)的简写，其核心思想是通过将业务逻辑、数据、显示分离来组织代码。
  MVC主要作用是降低了视图与业务逻辑间的双向偶合。
  MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异
  Model(模型)：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或者JavaBean组件（包括数据和行为），不过现在一般分离开来：Value Object(数据Dao) 和服务层(行为Service)。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。
View(视图)：负责进行模型的展示，一般就是我们见到的用户界面，用户想看到的东西。
Conttroller(控制器)：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责	展示、也就是说控制器做了个调度员的工作。
最典型的MVC就是JSP+Servlet+JavaBean
  Model1
在Web开发早期通常采用Model1模式进行开发。
在Model1模式下，整个Web应用几乎全部用JSP页面组成，只用少量的JavaBean来处理数据库连接、访问等操作
这个模式下JSP即使控制层（Controller）又是视图层（View）。这明显不符合Java的单一职责原则。比如控制逻辑和表现逻辑混杂在一起，导致代码重用率极低；再比如前端和后端相互依赖，难以进行测试维护并且开发效率极低。
  ​	Model1优点：架构简单，适合小型项目开发；
​	Model1缺点：JSP职责不单一，，职责过重，不便于维护
 Model2
Model2就是上面所述的Java Bean+JSP+Servlet这种开发模式，这就是早期的JavaWeb MVC开发模式。
 Model：系统涉及的数据，也就是dao与bean View：展示模型中的数据，只是用来展示 controller：处理用户请求发送给Model，然后Model返回数据的处理结果给JSP并展示给用户  职责分析：
Controller：控制器
 取得表单数据 调用业务逻辑 转向指定的页面  Model：模型
 业务逻辑 保存数据的状态  View：视图
 显示页面   Model2模式下还存在着很多问题，Model2的抽象和封装程度还远远不够，使用Model2进行开发时不可避免地重复造轮子，这就大大降低了程序的可维护性和复用性。
于是，很多JavaWeb开发相关的MVC框架应运而生，比如Stuts2，但是Struts2比较笨重。
   Spring MVC时代</description>
    </item>
    
    <item>
      <title>Spring（一）</title>
      <link>https://minster77.github.io/p/spring%E4%B8%80/</link>
      <pubDate>Mon, 04 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/spring%E4%B8%80/</guid>
      <description>Spring（一） Spring框架概述   概述
  Spring是轻量级的开源JavaEE框架
  Spring可以解决企业应用开发的复杂性
  Spring有两个核心部分：IOC和AOP
 IOC：控制反转，把创建对象的过程交给Spring进行管理 Aop：面向切面，不修改源代码进行功能增强    Spring特点
1、Spring是一个开源免费的框架 , 容器 .
2、Spring是一个轻量级的框架 , 非侵入式的 .
3、控制反转 IoC , 面向切面 Aop
4、对事物的支持 , 对框架的支持
 概括来说就是：Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。
     Spring的组成
Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .
组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：
  核心容器：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。
  Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</description>
    </item>
    
    <item>
      <title>Spring（二）</title>
      <link>https://minster77.github.io/p/spring%E4%BA%8C/</link>
      <pubDate>Mon, 04 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/spring%E4%BA%8C/</guid>
      <description>Spring（二） Beaen的自动装配  自动装配是Spring满足Bean依赖的一种方式 Spring会在上下文中自动寻找，并自动给Bean装配属性    byName自动装配
byName：会自动在容器上下文中查找和自己对象set方法后面的值对应的bean id
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;cat&amp;#34; class=&amp;#34;com.heng.pojo.Cat&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;dog&amp;#34; class=&amp;#34;com.heng.pojo.Dog&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;person&amp;#34; class=&amp;#34;com.heng.pojo.Person&amp;#34; autowire=&amp;#34;byName&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;jack&amp;#34;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 使用byName时，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致！
  byType自动装配
byType：会自动在容器上下文中查找和自己对象属性类型相同的bean
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;cat&amp;#34; class=&amp;#34;com.heng.pojo.Cat&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;dog&amp;#34; class=&amp;#34;com.heng.pojo.Dog&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;person&amp;#34; class=&amp;#34;com.heng.pojo.Person&amp;#34; autowire=&amp;#34;byType&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;jack&amp;#34;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 使用byType时，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致！
  使用注解实现自动装配
要使用注解，则需要做以下准备工作：
  导入约束</description>
    </item>
    
    <item>
      <title>MyBatis（二）</title>
      <link>https://minster77.github.io/p/mybatis%E4%BA%8C/</link>
      <pubDate>Sat, 02 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/mybatis%E4%BA%8C/</guid>
      <description>MyBatis(二) MyBatis resultMap元素 resultMap是MyBatis中最复杂的元素，主要用于解决实体类属性名与数据库表中字段名不一致的情况，可以将查询结果映射成实体对象。下面我们先从最简单的功能开始介绍
 现有的MyBatis版本只支持resultMap查询，不支持更新或者保存，更不必说级联的更新、删除和修改。
   resultMap元素的构成
resultMap元素可以包含以下子元素，代码如下
&amp;lt;resultMap id = &amp;#34;&amp;#34; type = &amp;#34;&amp;#34; &amp;gt; &amp;lt;!--类在实例化时用来注入结果的构造方法--&amp;gt; &amp;lt;constructor&amp;gt; &amp;lt;!--ID是参数，结果为ID--&amp;gt; &amp;lt;idArg&amp;gt;&amp;lt;/idArg&amp;gt; &amp;lt;!--注入到构造方法的一个普通结果--&amp;gt; &amp;lt;arg&amp;gt;&amp;lt;/arg&amp;gt; &amp;lt;/constructor&amp;gt; &amp;lt;!-- 用于表示哪个列是主键 --&amp;gt; &amp;lt;id&amp;gt;&amp;lt;/id&amp;gt; &amp;lt;!--注入到字段或JavaBean属性的普通结果--&amp;gt; &amp;lt;result&amp;gt;&amp;lt;/result&amp;gt; &amp;lt;!--用于一对一关联--&amp;gt; &amp;lt;association property = &amp;#34;&amp;#34;&amp;gt;&amp;lt;/association&amp;gt; &amp;lt;!--用于一对多、多对多关联--&amp;gt; &amp;lt;collection property = &amp;#34;&amp;#34;&amp;gt;&amp;lt;/collection&amp;gt; &amp;lt;!--使用结果值来决定使用哪个结果映射--&amp;gt; &amp;lt;discriminator javaType = &amp;#34;&amp;#34;&amp;gt; &amp;lt;!--基于某些值的结果映射--&amp;gt; &amp;lt;case value = &amp;#34;&amp;#34;&amp;gt;&amp;lt;/case&amp;gt; &amp;lt;/discriminator&amp;gt; &amp;lt;/resultMap&amp;gt; 其中：
 &amp;lt;resultMap&amp;gt; 元素的 type 属性表示需要的 POJO，id 属性是 resultMap 的唯一标识。 子元素 &amp;lt;constructor&amp;gt; 用于配置构造方法。当一个 POJO 没有无参数构造方法时使用。 子元素 &amp;lt;id&amp;gt; 用于表示哪个列是主键。允许多个主键，多个主键称为联合主键。 子元素&amp;lt;result&amp;gt;用于表示 POJO 和 SQL 列名的映射关系。 子元素 &amp;lt;association&amp;gt;、&amp;lt;collection&amp;gt; 和 &amp;lt;discriminator&amp;gt; 在级联的情况下使用  &amp;lt;id&amp;gt;和&amp;lt;result&amp;gt;元素都有以下属性</description>
    </item>
    
    <item>
      <title>MyBatis（一）</title>
      <link>https://minster77.github.io/p/mybatis%E4%B8%80/</link>
      <pubDate>Fri, 01 Oct 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/mybatis%E4%B8%80/</guid>
      <description>MyBatis(一) MyBatis概括   什么是MyBatis
 MyBatis 是一款优秀的持久层框架 MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程 MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。 MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。 2013年11月迁移到Github . Mybatis官方文档 : http://www.mybatis.org/mybatis-3/zh/index.html GitHub : https://github.com/mybatis/mybatis-3    什么是持久化
持久化就是将程序数据在持久状态和瞬时状态间转化的机制。
 即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。 JDBC就是一种持久化机制。文件IO也是一种持久化机制。 在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。    为什么需要持久化服务呢？
那是由于内存本身的缺陷引起的
 内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。 内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。    什么是持久层？
持久层：完成持久化工作的代码块 . &amp;mdash;-&amp;gt; dao层 【DAO (Data Access Object) 数据访问对象】</description>
    </item>
    
  </channel>
</rss>
