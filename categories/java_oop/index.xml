<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java_OOP on MinsterBlog</title>
    <link>https://minster77.github.io/categories/java_oop/</link>
    <description>Recent content in Java_OOP on MinsterBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 May 2021 16:22:25 +0800</lastBuildDate><atom:link href="https://minster77.github.io/categories/java_oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaInterface</title>
      <link>https://minster77.github.io/p/javainterface/</link>
      <pubDate>Tue, 04 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/javainterface/</guid>
      <description>JavaInterface   接口的基本介绍 接口的注意事项及使用细节 接口实现与类的继承 接口的多态性   接口基本介绍   接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再根据具体情况把这些方法写出来。
接口的定义：
interface 接口名{ //属性  //方法 } 类实现接口:
class ClassName implements Interface { //自己的属性  //自己的方法  //必须实现的接口的抽象方法 }   在jdk7前，接口里的所以方法都没有方法体，即都是抽象方法。
  jdk8后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现。但默认方法需要使用default关键字修饰
  在接口中，定义抽象方法时可以省略abstract关键字。如果一个类实现了接口，则需要把接口的所有抽象方法都实现。
代码演示
创建接口Interface01
package com.interface_; public interface Interface01 { //定义属性  public int n =1; //定义抽象方法  public void A(); //定义默认方法  default public void B(){ System.out.println(&amp;#34;我是默认方法&amp;#34;); } //定义静态方法  public static void C(){ System.</description>
    </item>
    
    <item>
      <title>Java内部类</title>
      <link>https://minster77.github.io/p/java%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <pubDate>Mon, 03 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/java%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <description>Java内部类   内部类的基本介绍 局部内部类 匿名内部类 成员内部类 静态内部类   内部类基本介绍   一个类的内部又完整的嵌套了另一个类结构。被嵌套的类又称为内部类，嵌套其他类的类称为外部类。是类的五大成员之一（属性、方法、构造器、代码块、内部类）。
  内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系
  基本语法
class Outer{//外部类  class Inner{//内部类  } } class Other{//外部其他类  }   内部类的分类
 定义在外部类的局部位置上（比如方法内）：  局部内部类（有类名） 匿名内部类（没有类名，重点！）   定义在外部类的成员位置上：  成员内部类（没用static修饰） 静态内部类（使用static修饰）      局部内部类 说明：局部内部类是定义在外部类的局部位置上的，通常在方法中，并且有类名。
  可以直接访问外部类的所有成员，包含私有的
  不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final。（使用了final说明该内部类不能被继承！）
  作用域：仅仅在定义它的方法或代码块中。
  局部内部类访问外部类的成员（访问方式：直接访问）
  外部类访问局部内部类的成员（访问方式：创建对象，再访问[注意，必须在作用域内！]）
代码演示
package com.</description>
    </item>
    
    <item>
      <title>JavaOOP_02</title>
      <link>https://minster77.github.io/p/javaoop_02/</link>
      <pubDate>Sun, 02 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/javaoop_02/</guid>
      <description>深入面向对象   面向对象三大特性 static关键字详解 抽象类和接口 内部类及OOP实战   面向对象三大特性 封装   我们在程序设计中要追求“高内聚，低耦合”。
 高内聚：就是类的内部数据操作细节由自己完成，不允许外部干涉 仅暴露少量的方法给外部使用    所以在设计时需要把一些数据与方法封装起来（数据的隐藏）
  属性私有，get/set调用
  作用
 提高程序的安全性，保护数据 隐藏代码的实现细节 统一接口 增加了系统可维护性    代码演示
Student类
package com.oop.demo02; //学生类 public class Student { private String name; private int age; private String sex; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.</description>
    </item>
    
    <item>
      <title>JavaOOP_01</title>
      <link>https://minster77.github.io/p/javaoop_01/</link>
      <pubDate>Sat, 01 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/javaoop_01/</guid>
      <description>初识面向对象   初识面向对象 方法回顾和加深 对象的创建分析   初识面向对象   面向过程思想
 步骤清晰简单，第一步做什么，第二部做什么&amp;hellip;. 面向过程适合处理一些较为简单的问题    面向对象思想
 物以类聚，分类的思想模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索 面向对象适合处理复杂的问题，适合处理需要多人协作的问题！    对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。
  面向对象编程的本质就是：以类的方式组织代码，以对象的形式组织(封装)数据
  面向对象的三大特性
 封装：封装就是把同一类事物的共性（包括属性和方法）归到同一类中，方便使用。 继承：继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。 多态：多态是同一个行为具有多个不同表现形式或形态的能力。    回顾方法和加深   静态方法与非静态方法的调用
 静态方法定义： 在类中使用static修饰的静态方法会随着类的定义而被分配和装载入内存中；而非静态方法属于对象的具体实例，只有在类的对象创建时在对象的内存中才有这个方法的代码段。  Student类
package com.oop.demo01; public class Student { //静态方法  public static void eat(){ System.out.println(&amp;#34;kazikazi&amp;#34;); } //非静态方法  public void say(){ System.out.println(&amp;#34;hello&amp;#34;); } } Demo01类</description>
    </item>
    
  </channel>
</rss>
