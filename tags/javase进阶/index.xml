<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaSE进阶 on MinsterBlog</title>
    <link>https://minster77.github.io/tags/javase%E8%BF%9B%E9%98%B6/</link>
    <description>Recent content in JavaSE进阶 on MinsterBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Sep 2021 16:22:25 +0800</lastBuildDate><atom:link href="https://minster77.github.io/tags/javase%E8%BF%9B%E9%98%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reflection</title>
      <link>https://minster77.github.io/p/reflection/</link>
      <pubDate>Sun, 05 Sep 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/reflection/</guid>
      <description>反射   反射机制 class类 类加载 反射获取类的结构信息 通过反射创建对象 练习   反射机制   引出反射
  根据配置文件re.properties指定信息，创建Cat对象并调用方法hi
properties配置文件如下
classPath=com.reflection_.Catmethod=hiCat类
package com.reflection_; public class Cat { private String name = &amp;#34;jack&amp;#34;; public void hi(){ System.out.println(&amp;#34;hi &amp;#34;+name); } } 实现类ReflectionQuestion
package com.reflection_.question; import com.reflection_.Cat; public class ReflectionQuestion { public static void main(String[] args) { //1.使用传统方法实现，通过new一个对象，调用方法来实现  Cat cat = new Cat(); cat.hi(); } } 我们使用传统的方式，能实现上述需求，但如果我们Cat类需要增加功能或者换一种实现时，我们就需要去修改源码了！
所以我们可以尝试使用反射来实现上述需求
package com.reflection_.question; import com.</description>
    </item>
    
    <item>
      <title>Java_IO流_2</title>
      <link>https://minster77.github.io/p/java_io%E6%B5%81_2/</link>
      <pubDate>Sat, 19 Jun 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/java_io%E6%B5%81_2/</guid>
      <description>JavaIO流2   BufferedReader与BufferedWriter 使用字节流实现对二进制文件复制 对象流 标准输入输出流 转换流 打印流 Properties类   BufferedReader与BufferedWriter   BufferedReader和BufferedWriter属于字符流，是按照字符来读取数据的。
  关闭处理流的时候，只需要关闭外层流即可
演示bufferedReader的使用
package com.java_io; import java.io.BufferedReader; import java.io.FileReader; public class BufferedReaderTest { public static void main(String[] args) throws Exception{ String path = &amp;#34;E://note.txt&amp;#34;; //创建BufferedReader对象  BufferedReader bufferedReader = new BufferedReader(new FileReader(path)); //按行读取，提高效率  String line; /* * bufferedReader.readLine()是按行读取文件的 * 当返回null时，表示已读取完毕 */ while ((line =bufferedReader.readLine())!=null){ System.out.println(line); } bufferedReader.close(); } }   需要注意的是，关闭流时只需要关闭BufferedReader。因为底层会自动关闭节点流</description>
    </item>
    
    <item>
      <title>Java泛型</title>
      <link>https://minster77.github.io/p/java%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 01 Jun 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/java%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型   引出泛型 泛型的介绍及使用 泛型的使用细节 泛型课堂练习题 自定义泛型 Junit   引出泛型   现在有这样的一个需求
 编写一个程序，在ArrayList中，添加三个Dog对象 Dog对象含有name和age，并输出name和age（要求使用getXxx方法）  用传统的方法编码，代码演示如下
创建Dog类
class Dog{ private String name; private int age; public Dog(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.</description>
    </item>
    
    <item>
      <title>Java_IO流</title>
      <link>https://minster77.github.io/p/java_io%E6%B5%81/</link>
      <pubDate>Sat, 29 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/java_io%E6%B5%81/</guid>
      <description>Java IO流1（概念及节点流）   文件 IO流原理及流的分类 InputStream的子类及使用 OutputStream的子类及使用 利用FileInputStream及FileOutputStream进行文件copy Reader与Writer的子类及使用 节点流和处理流   文件   文件是保存数据的地方，例如word文档，txt文档等都是文件。
  文件流
文件在程序中是以流的形式来操作的
 流：数据在数据源(文件）和程序（内存）之间经历的路径 输入流：数据从数据源（文件）到程序（内存）的路径 输出流：数据从程序（内存）到数据源（文件）的路径    常用的文件操作
    使用new File（String pathname）创建
package com.java_io; import org.junit.Test; import java.io.File; import java.io.IOException; public class FileCreate1 { public static void main(String[] args) { } //方法1：使用new File(filePath)创建文件  @Test public void createFile01() throws IOException { //创建的文件路径名称  String filePath = &amp;#34;e:\\news1.</description>
    </item>
    
    <item>
      <title>JavaInterface</title>
      <link>https://minster77.github.io/p/javainterface/</link>
      <pubDate>Tue, 04 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/javainterface/</guid>
      <description>JavaInterface   接口的基本介绍 接口的注意事项及使用细节 接口实现与类的继承 接口的多态性   接口基本介绍   接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再根据具体情况把这些方法写出来。
接口的定义：
interface 接口名{ //属性  //方法 } 类实现接口:
class ClassName implements Interface { //自己的属性  //自己的方法  //必须实现的接口的抽象方法 }   在jdk7前，接口里的所以方法都没有方法体，即都是抽象方法。
  jdk8后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现。但默认方法需要使用default关键字修饰
  在接口中，定义抽象方法时可以省略abstract关键字。如果一个类实现了接口，则需要把接口的所有抽象方法都实现。
代码演示
创建接口Interface01
package com.interface_; public interface Interface01 { //定义属性  public int n =1; //定义抽象方法  public void A(); //定义默认方法  default public void B(){ System.out.println(&amp;#34;我是默认方法&amp;#34;); } //定义静态方法  public static void C(){ System.</description>
    </item>
    
    <item>
      <title>Java内部类</title>
      <link>https://minster77.github.io/p/java%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <pubDate>Mon, 03 May 2021 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/java%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <description>Java内部类   内部类的基本介绍 局部内部类 匿名内部类 成员内部类 静态内部类   内部类基本介绍   一个类的内部又完整的嵌套了另一个类结构。被嵌套的类又称为内部类，嵌套其他类的类称为外部类。是类的五大成员之一（属性、方法、构造器、代码块、内部类）。
  内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系
  基本语法
class Outer{//外部类  class Inner{//内部类  } } class Other{//外部其他类  }   内部类的分类
 定义在外部类的局部位置上（比如方法内）：  局部内部类（有类名） 匿名内部类（没有类名，重点！）   定义在外部类的成员位置上：  成员内部类（没用static修饰） 静态内部类（使用static修饰）      局部内部类 说明：局部内部类是定义在外部类的局部位置上的，通常在方法中，并且有类名。
  可以直接访问外部类的所有成员，包含私有的
  不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final。（使用了final说明该内部类不能被继承！）
  作用域：仅仅在定义它的方法或代码块中。
  局部内部类访问外部类的成员（访问方式：直接访问）
  外部类访问局部内部类的成员（访问方式：创建对象，再访问[注意，必须在作用域内！]）
代码演示
package com.</description>
    </item>
    
    <item>
      <title>JavaThread</title>
      <link>https://minster77.github.io/p/javathread/</link>
      <pubDate>Wed, 02 Sep 2020 16:22:25 +0800</pubDate>
      
      <guid>https://minster77.github.io/p/javathread/</guid>
      <description>多线程详解   进程与线程简介 创建线程 线程状态 线程同步 线程协作 线程池   进程与线程简介   进程（Process）：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——系统资源分配的最小单位。
  线程（Thread）：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程——程序执行的最小单位。
  两者之间的区别见下图
可以发现，进程是由（线程+内存+文件/网络句柄）等元素构成的
  注意：很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果是模拟出来的多线程，即在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉。
  普通方法调用和多线程
  核心概念
 线程就是独立的执行路径 在程序执行时，即使没有自己创建1线程，后台也会有多个线程，如主线程，gc线程(垃圾回收线程)。 main()称之为主线程，为系统的入口，用于执行整个程序 在一个程序中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能人为干预的 对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制。 线程会带来额外的开销，如CPU调度时间；并发控制开销。 每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。    创建线程 三种创建方式
  继承Thread创建线程
 自定义线程类继承Thread类 重写run()方法，编写线程执行体 创建线程对象，调用start()方法启动线程  创建TestThread01类，实现继承Thread类创建线程
package com.thread_; //创建线程类方式一：继承Thread类，重写run方法，在主线程调用start开启线程。 public class TestThread01 extends Thread{ //run方法线程体  @Override public void run() { for (int i = 0; i &amp;lt; 50; i++) { System.</description>
    </item>
    
  </channel>
</rss>
